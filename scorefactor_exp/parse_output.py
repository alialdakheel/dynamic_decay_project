"""
Parse exp_output directory (output files generated by StarExec)
"""

import os

DEBUG = True

def parse_one(path):
    with open(path, 'r') as fp:
        level_list = list()
        for line in fp:
            if line[-2] == '%':
                level = int(line.split()[5])
                level_list.append(level)
            if "total real time since initialization:" in line:
                solve_time = float(line.split()[7])

    average_level = sum(level_list)/len(level_list)
    if DEBUG:
        print(path)
        print("avrage level:", average_level)
        print("solve time:", solve_time)

    return level_list, solve_time

def parse_many(path_list):
    level_dict = dict()
    time_dict = dict()
    for path in path_list:
        try:
            level_list, solve_time = parse_one(path)
        except:
            continue
        level_dict[path] = level_list
        time_dict[path] = solve_time
    return level_dict, time_dict

if __name__ == "__main__":
    exp_outputs_dir = "exp_output"
    config_list = [
            "cadical-1.3.1-c9b8d0b67a123___sat_500",
            "cadical-1.3.1-c9b8d0b67a123___sat_950",
            "cadical-1.3.1-c9b8d0b67a123___unsat_500",
            "cadical-1.3.1-c9b8d0b67a123___unsat_950"
            ]
    dir_tree = os.walk(exp_outputs_dir)
    path_list = [f"{t[0]}/{f}" for t in dir_tree for f in t[2] if f[-4:]==".txt"]
    path_dict = {c:[path for path in path_list if c in path] for c in config_list}

    res_dict = dict()
    for k, paths in path_dict.items():
        level_dict, time_dict = parse_many(paths)
        res_dict[k] = (level_dict, time_dict)





